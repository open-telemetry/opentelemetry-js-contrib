on:
  push:
    branches:
      - main

name: Run Release Please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      # The logic below handles the npm publication:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Install packages
        run: |
          npm ci

      - uses: googleapis/release-please-action@f3969c04a4ec81d7a9aa4010d84ae6a7602f86a7 # v4.1.1
        id: release
        with:
          token: ${{secrets.RELEASE_PR_TOKEN}}
          target-branch: main

      # get release PR as we're currently on main
      - name: Checkout release PR
        # only checkout if a PR has been created, otherwise this will fail
        if: ${{ steps.release.outputs.pr }}
        uses: actions/checkout@v4
        with:
          ref: release-please--branches--main
          # use a token so that workflows on the PR run when we push later
          token: ${{ secrets.RELEASE_PR_TOKEN }}

      # release-please does not do this on its own, so we do it here instead
      - name: Update package-lock.json in PR
        # only update if a PR has been created
        if: ${{ steps.release.outputs.pr }}
        run: |
          npm install --ignore-scripts --package-lock-only
          git add package-lock.json
          git config user.name opentelemetrybot
          git config user.email 107717825+opentelemetrybot@users.noreply.github.com
          git commit -m "chore: sync package-lock.json"
          git push

      # get main again
      - name: Checkout Repository
        # only checkout if a release has been created
        if: ${{ steps.release.outputs.releases_created }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Rebuild Packages
        # only rebuild if a release has been created
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          npm ci
          npm run compile

      # Release Please has already incremented versions and published tags, so we just
      # need to publish all unpublished versions to npm here
      # See: https://github.com/lerna/lerna/tree/main/commands/publish#bump-from-package
      - name: Publish to npm
        # only publish if a release has been created
        if: ${{ steps.release.outputs.releases_created }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        run: npx lerna publish from-package --no-push --no-private --no-git-tag-version --no-verify-access --yes
