/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { AnyValue } from '@opentelemetry/api-logs';

// This mimicks `APIPromise` from `openai` sufficiently for usage in this
// instrumentation. OpenAI's APIPromise adds some methods, but we don't use
// those. We don't import the type directly from `openai` because how to
// import it has changed between openai@4 and openai@5.
export type APIPromise<T> = Promise<T>;

export type GenAIFunction = {
  name: string | undefined;
  arguments?: AnyValue;
};

export type GenAIToolCall = {
  id: string;
  type: string | undefined;
  function?: GenAIFunction;
};

export type GenAIMessage = {
  role?: string;
  content?: AnyValue;
  tool_calls?: GenAIToolCall[];
};

export type GenAIChoiceEventBody = {
  finish_reason: string;
  index: number;
  message: GenAIMessage;
};

export type GenAISystemMessageEventBody = {
  role?: string;
  content?: AnyValue;
};

export type GenAIUserMessageEventBody = {
  role?: string;
  content?: AnyValue;
};

export type GenAIAssistantMessageEventBody = {
  role?: string;
  content?: AnyValue;
  tool_calls?: GenAIToolCall[];
};

export type GenAIToolMessageEventBody = {
  role?: string;
  content?: AnyValue;
  id: string;
};


// Modelling output messages JSON schema: https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-output-messages.json

/**
 * Represents the reason for finishing the generation.
 */
export type FinishReason =
  | 'stop'
  | 'length'
  | 'content_filter'
  | 'tool_call'
  | 'error';

/**
 * Role of the entity that created the message.
 */
export type Role = 'system' | 'user' | 'assistant' | 'tool';

/**
 * Represents an arbitrary message part with any type and properties.
 * This allows for extensibility with custom message part types.
 */
export interface GenericPart {
  /** The type of the content captured in this part. */
  type: string;
  [key: string]: unknown;
}

/**
 * Represents text content sent to or received from the model.
 */
export interface TextPart extends GenericPart {
  /** The type of the content captured in this part. */
  type: 'text';
  /** Text content sent to or received from the model. */
  content: string;
}

/**
 * Represents a tool call requested by the model.
 */
export interface ToolCallRequestPart extends GenericPart {
  /** The type of the content captured in this part. */
  type: 'tool_call';
  /** Unique identifier for the tool call. */
  id?: string | null;
  /** Name of the tool. */
  name: string;
  /** Arguments for the tool call. */
  arguments?: unknown | null;
}

/**
 * Represents a tool call result sent to the model or a built-in tool call outcome and details.
 */
export interface ToolCallResponsePart extends GenericPart {
  /** The type of the content captured in this part. */
  type: 'tool_call_response';
  /** Unique tool call identifier. */
  id?: string | null;
  /** Tool call response. */
  response: unknown;
}

/**
 * Union of all possible message parts that can make up the message content.
 */
export type MessagePart =
  | TextPart
  | ToolCallRequestPart
  | ToolCallResponsePart
  | GenericPart;

/**
 * Represents a chat message sent to or from the model.
 */
export interface ChatMessage {
  /** Role of the entity that created the message. */
  role: Role | string;
  /** List of message parts that make up the message content. */
  parts: MessagePart[];
  [key: string]: unknown;
}

/**
 * Represents the list of input messages sent to the model.
 */
export type InputMessages = ChatMessage[];

/**
 * Represents an output message generated by the model or agent.
 * The output message captures a specific response (choice, candidate).
 */
export interface OutputMessage {
  /** Role of the entity that created the message. */
  role: Role | string;
  /** List of message parts that make up the message content. */
  parts: MessagePart[];
  /** Reason for finishing the generation. */
  finish_reason: FinishReason | string;
  [key: string]: unknown;
}

/**
 * Represents the list of output messages generated by the model or agent.
 */
export type OutputMessages = OutputMessage[];
